# name: CI/CD

# on:
#   push:
#     branches:
#       - main
#   pull_request:

# permissions:
#   contents: write
#   packages: write
#   id-token: write 

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v3

#       - name: Set up Node.js
#         uses: actions/setup-node@v3
#         with:
#           node-version: 20
#           registry-url: 'https://npm.pkg.github.com/'
#           scope: '@eben4real'

#       - name: Install Dependencies
#         run: yarn install --frozen-lockfile

#       - name: Run Tests
#         run: yarn run test

#       - name: Build Web App
#         run: yarn turbo run build
#         # ðŸ‘† ensures only apps/web (and its dependencies in packages/*) are built

#       - name: Upload Web Build
#         uses: actions/upload-artifact@v3
#         with:
#           name: web-build
#           path: apps/web/out   # Next.js static export
#           # or apps/web/build (React CRA)
#           # or apps/web/dist (Vue)
#           # adjust depending on your framework

#   publish:
#     needs: build
#     runs-on: ubuntu-latest
#     if: github.ref == 'refs/heads/main'
#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v3
#         with:
#           fetch-depth: 0

#       - name: Set up Node.js
#         uses: actions/setup-node@v3
#         with:
#           node-version: 20
#           registry-url: 'https://npm.pkg.github.com'
#           scope: '@eben4real'

#       - name: Install Dependencies
#         run: yarn install --frozen-lockfile

#       - name: Create Release PR or Publish
#         uses: changesets/action@v1
#         with:
#           publish: yarn changeset publish
#         env:
#           GITHUB_TOKEN: ${{ secrets.TOKEN }}
#           NODE_AUTH_TOKEN: ${{ secrets.TOKEN }}

#   deploy:
#     needs: build
#     runs-on: ubuntu-latest
#     if: github.ref == 'refs/heads/main'
#     environment:
#       name: production
#       url: https://dXXXXXXXXXXXX.cloudfront.net   # or your custom domain
#     steps:
#       - name: Download Web Build
#         uses: actions/download-artifact@v4
#         with:
#           name: web-build
#           path: web-build

#       # pick the right inner folder from your artifact
#       - name: Determine build directory
#         id: outdir
#         run: |
#           if [ -d "web-build/out" ]; then echo "dir=web-build/out" >> $GITHUB_OUTPUT;
#           elif [ -d "web-build/dist" ]; then echo "dir=web-build/dist" >> $GITHUB_OUTPUT;
#           elif [ -d "web-build/build" ]; then echo "dir=web-build/build" >> $GITHUB_OUTPUT;
#           else echo "No build output found" && ls -la web-build && exit 1; fi

#       - name: Configure AWS Credentials (OIDC)
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           role-to-assume: arn:aws:iam::298722972102:role/GithubOidcDeployRole
#           aws-region: ${{ vars.AWS_REGION }}       # set e.g. eu-north-1 in repo Variables

#       - name: Sync assets to S3 (long cache)
#         run: |
#           aws s3 sync "${{ steps.outdir.outputs.dir }}/" "s3://${{ vars.S3_BUCKET }}/" \
#             --delete \
#             --exclude "index.html" \
#             --cache-control "public, max-age=31536000, immutable"

#       - name: Upload index.html (short cache)
#         run: |
#           if [ -f "${{ steps.outdir.outputs.dir }}/index.html" ]; then
#             aws s3 cp "${{ steps.outdir.outputs.dir }}/index.html" "s3://${{ vars.S3_BUCKET }}/index.html" \
#               --cache-control "public, max-age=0, must-revalidate" \
#               --content-type "text/html; charset=utf-8";
#           fi

#       - name: Invalidate CloudFront Cache
#         run: |
#           aws cloudfront create-invalidation \
#             --distribution-id "${{ vars.CLOUDFRONT_DISTRIBUTION_ID }}" \
#             --paths "/*"


name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://npm.pkg.github.com/'
          scope: '@eben4real'

      - name: Enable Corepack (Yarn)
        run: corepack enable

      - name: Install Dependencies
        run: yarn install --frozen-lockfile
        env:
          NODE_AUTH_TOKEN: ${{ secrets.TOKEN }}

      - name: Run Tests
        run: |
          if yarn run | grep -q "test"; then
            yarn test
          else
            echo "No test script found, skipping."
          fi

      - name: Build Web App (Turborepo)
        run: yarn turbo run build --filter=apps/web...
        env:
          NODE_ENV: production


  publish:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://npm.pkg.github.com'
          scope: '@eben4real'

      - name: Install Dependencies
        run: yarn install --frozen-lockfile
        env:
          NODE_AUTH_TOKEN: ${{ secrets.TOKEN }}

      - name: Create Release PR or Publish
        uses: changesets/action@v1
        with:
          publish: yarn changeset publish
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.TOKEN }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: d2ej5qzyy7dju9.cloudfront.net   # replace with your CloudFront/custom domain
    steps:
      - name: Download Web Build
        uses: actions/download-artifact@v4
        with:
          name: web-build
          path: web-build

      - name: Determine build directory
        id: outdir
        run: |
          if [ -d "web-build/apps/web/out" ]; then echo "dir=web-build/apps/web/out" >> $GITHUB_OUTPUT;
          elif [ -d "web-build/apps/web/dist" ]; then echo "dir=web-build/apps/web/dist" >> $GITHUB_OUTPUT;
          elif [ -d "web-build/apps/web/build" ]; then echo "dir=web-build/apps/web/build" >> $GITHUB_OUTPUT;
          elif [ -d "web-build/out" ]; then echo "dir=web-build/out" >> $GITHUB_OUTPUT;
          elif [ -d "web-build/dist" ]; then echo "dir=web-build/dist" >> $GITHUB_OUTPUT;
          elif [ -d "web-build/build" ]; then echo "dir=web-build/build" >> $GITHUB_OUTPUT;
          else echo "No build output found" && echo "Listing:" && ls -laR web-build && exit 1; fi

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::298722972102:role/GithubOidcDeployRole
          aws-region: ${{ vars.AWS_REGION }}

      - name: Sync assets to S3 (long cache)
        run: |
          aws s3 sync "${{ steps.outdir.outputs.dir }}/" "s3://${{ vars.S3_BUCKET }}/" \
            --delete \
            --exclude "index.html" \
            --cache-control "public, max-age=31536000, immutable"

      - name: Upload index.html (short cache)
        run: |
          if [ -f "${{ steps.outdir.outputs.dir }}/index.html" ]; then
            aws s3 cp "${{ steps.outdir.outputs.dir }}/index.html" "s3://${{ vars.S3_BUCKET }}/index.html" \
              --cache-control "public, max-age=0, must-revalidate" \
              --content-type "text/html; charset=utf-8";
          fi

      - name: Invalidate CloudFront Cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id "${{ vars.CLOUDFRONT_DISTRIBUTION_ID }}" \
            --paths "/*"
