name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://npm.pkg.github.com/'
          scope: '@eben4real'

      - name: Enable Corepack (Yarn)
        run: corepack enable

      - name: Install Dependencies
        run: yarn install --frozen-lockfile
        env:
          NODE_AUTH_TOKEN: ${{ secrets.TOKEN }}  # for GitHub Packages

      - name: Run Tests
        run: |
          if yarn run | grep -q "test"; then
            yarn test
          else
            echo "No test script found, skipping."
          fi

      # Build only apps/web (and its deps) via path filter
      - name: Build Web App (Turborepo)
        run: yarn turbo run build --filter=@eben4real/web...
        env:
          NODE_ENV: production

      # Fail fast if static export didn't happen
      - name: Assert build output exists
        run: |
          if [ ! -d "apps/web/out" ]; then
            echo "apps/web/out not found. The app did not export static files."
            echo "Tree of apps/web:"; ls -la apps/web || true
            exit 1
          fi
          echo "Found apps/web/out:"
          ls -la apps/web/out

      # Upload the exact folder the deploy job expects
      - name: Upload Web Build
        uses: actions/upload-artifact@v4
        with:
          name: web-build
          path: apps/web/out
          if-no-files-found: error
          retention-days: 5

  publish:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://npm.pkg.github.com'
          scope: '@eben4real'

      - name: Install Dependencies
        run: yarn install --frozen-lockfile
        env:
          NODE_AUTH_TOKEN: ${{ secrets.TOKEN }}

      - name: Create Release PR or Publish
        uses: changesets/action@v1
        with:
          publish: yarn changeset publish
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.TOKEN }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://d2ej5qzyy7dju9.cloudfront.net  # use full URL for a clickable link
    steps:
      - name: Download Web Build
        uses: actions/download-artifact@v4
        with:
          name: web-build
          path: web-build

      # We uploaded apps/web/out directly, so the artifact root IS the output
      - name: Set output dir
        id: outdir
        run: echo "dir=web-build" >> $GITHUB_OUTPUT
      
      - name: Debug OIDC token (temp)
        uses: actions/github-script@v7
        with:
          script: |
            // core is injected by github-script
            const token = await core.getIDToken('sts.amazonaws.com');

            // decode JWT payload (no network)
            const b64 = s => Buffer.from(s.replace(/-/g,'+').replace(/_/g,'/'),'base64').toString('utf8');
            const [, payload] = token.split('.');
            const claims = JSON.parse(b64(payload));

            core.info('--- OIDC claims ---');
            core.info(`aud: ${claims.aud}`);
            core.info(`sub: ${claims.sub}`);
            core.info(`repository: ${claims.repository}`);
            core.info(`ref: ${claims.ref}`);
            core.info(`job_workflow_ref: ${claims.job_workflow_ref}`);
            core.setSecret(token); // mask token


      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::298722972102:role/GithubOidcDeployRole
          aws-region: ${{ vars.AWS_REGION }}

      - name: Sync assets to S3 (long cache)
        run: |
          aws s3 sync "${{ steps.outdir.outputs.dir }}/" "s3://${{ vars.S3_BUCKET }}/" \
            --delete \
            --exclude "index.html" \
            --cache-control "public, max-age=31536000, immutable"

      - name: Upload index.html (short cache)
        run: |
          aws s3 cp "${{ steps.outdir.outputs.dir }}/index.html" "s3://${{ vars.S3_BUCKET }}/index.html" \
            --cache-control "public, max-age=0, must-revalidate" \
            --content-type "text/html; charset=utf-8"

      - name: Invalidate CloudFront Cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id "${{ vars.CLOUDFRONT_DISTRIBUTION_ID }}" \
            --paths "/*"
